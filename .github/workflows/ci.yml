name: 'CI'

on:
  - 'pull_request'
  - 'push'

jobs:
  phpSyntaxCheck:
    name: 'PHP Syntax Check'

    strategy:
      matrix:
        php_version:
          - '8.0'

    runs-on: 'ubuntu-20.04'

    steps:
      - uses: 'actions/checkout@v2'

      - name: 'Set up PHP version ${{ matrix.php_version }}'
        run: sudo update-alternatives --set php /usr/bin/php${{ matrix.php_version }}

      - name: 'Syntax check'
        run: |
          find . \( -type d \( -name '.git' -or -name 'vendor' -or -name 'node_modules' -or -name 'runtime' \) -prune \) -or \( -type f -name '*.php' -print \) \
            | sort \
            | xargs -n 1 php -l
        env:
          LANG: C
        working-directory: 'webapp'

  makeComposerCache:
    name: 'Make composer cache'

    runs-on: 'ubuntu-20.04'

    steps:
      - uses: 'actions/checkout@v2'

      - uses: 'actions/cache@v2'
        with:
          path: |
            ~/.cache/composer/files
            webapp/vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('webapp/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: 'Set up PHP version 8.0'
        run: sudo update-alternatives --set php /usr/bin/php8.0

      - name: 'Install Composer dependencies'
        working-directory: 'webapp'
        run: |
          ln -s `which composer` composer.phar
          ./composer.phar install --prefer-dist

  makeNpmCache:
    name: 'Make NPM cache'

    runs-on: 'ubuntu-20.04'

    steps:
      - uses: 'actions/checkout@v2'

      - uses: 'actions/cache@v2'
        with:
          path: |
            webapp/node_modules
            ~/.npm
          key: npm-${{ hashFiles('webapp/package-lock.json') }}
          restore-keys: npm-

      - name: 'Install NPM packages'
        run: 'npm clean-install'
        working-directory: 'webapp'

  phpStyleCheck:
    name: 'PHP Coding Style'

    runs-on: 'ubuntu-20.04'

    needs: 'makeComposerCache'

    steps:
      - uses: 'actions/checkout@v2'

      - uses: 'actions/cache@v2'
        with:
          path: |
            ~/.cache/composer/files
            webapp/vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('webapp/composer.lock') }}

      - name: 'Set up PHP version 8.0'
        run: sudo update-alternatives --set php /usr/bin/php8.0

      - name: 'Run PHPCS'
        run: 'vendor/bin/phpcs'
        working-directory: 'webapp'

      - name: 'Run PHPStan'
        run: 'vendor/bin/phpstan analyze --memory-limit=1G'
        working-directory: 'webapp'
        continue-on-error: true

  jsStyleCheck:
    name: 'JavaScript Coding Style'

    runs-on: 'ubuntu-20.04'

    needs: 'makeNpmCache'

    steps:
      - uses: 'actions/checkout@v2'

      - uses: 'actions/cache@v2'
        with:
          path: |
            webapp/node_modules
            ~/.npm
          key: npm-${{ hashFiles('webapp/package-lock.json') }}

      - name: 'Run semistandard'
        run: |
          npx semistandard --global='jQuery' 'resource/**/*.es'
        working-directory: 'webapp'

  cssStyleCheck:
    name: 'CSS Coding Style'

    runs-on: 'ubuntu-20.04'

    needs: 'makeNpmCache'

    steps:
      - uses: 'actions/checkout@v2'

      - uses: 'actions/cache@v2'
        with:
          path: |
            webapp/node_modules
            ~/.npm
          key: npm-${{ hashFiles('webapp/package-lock.json') }}

      - name: 'Run stylelint'
        run: |
          npx stylelint 'resource/**/*.scss'
        working-directory: 'webapp'

  composerLicenseCheck:
    name: 'Check license of composer packages'

    runs-on: 'ubuntu-20.04'

    needs: 'makeComposerCache'

    steps:
      - uses: 'actions/checkout@v2'

      - name: 'Set up PHP version 8.0'
        run: sudo update-alternatives --set php /usr/bin/php8.0

      - uses: 'actions/cache@v2'
        with:
          path: |
            ~/.cache/composer/files
            webapp/vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('webapp/composer.lock') }}

      - name: 'Run license checker'
        working-directory: 'webapp'
        run: |
          vendor/bin/composer-license-checker check \
            -a BSD-3-Clause \
            -a LGPL-2.1-or-later \
            -a LGPL-3.0-or-later \
            -a MIT \
            -a NYSL-0.9982

  npmLicenseCheck:
    name: 'Check license of npm packages'

    runs-on: 'ubuntu-20.04'

    needs: 'makeNpmCache'

    steps:
      - uses: 'actions/checkout@v2'

      - uses: 'actions/cache@v2'
        with:
          path: |
            webapp/node_modules
            ~/.npm
          key: npm-${{ hashFiles('webapp/package-lock.json') }}

      - name: 'Run license checker'
        working-directory: 'webapp'
        run: |
          npx license-checker-rseidelsohn --production --onlyAllow="Apache-2.0;BSD-2-Clause;BSD-3-Clause;CC-BY-3.0;CC-BY-4.0;CC0-1.0;ISC;MIT"

  runMake:
    name: 'Test `make`'

    runs-on: 'ubuntu-20.04'

    needs:
      - 'makeComposerCache'
      - 'makeNpmCache'

    steps:
      - uses: 'actions/checkout@v2'

      - uses: 'actions/cache@v2'
        with:
          path: |
            ~/.cache/composer/files
            webapp/vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('webapp/composer.lock') }}

      - uses: 'actions/cache@v2'
        with:
          path: |
            webapp/node_modules
            ~/.npm
          key: npm-${{ hashFiles('webapp/package-lock.json') }}

      - name: 'Adjust environment'
        working-directory: 'webapp'
        run: |
          ln -s `which composer` composer.phar
          make .browserslistrc config/cookie-secret.php
          touch composer.lock package-lock.json node_modules vendor

      - name: 'Run `make`'
        working-directory: 'webapp'
        run: |
          make
